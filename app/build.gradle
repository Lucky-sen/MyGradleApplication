plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}


//sign.properties的内容
Properties properties = new Properties()
properties.load(project.rootProject.file('sign.properties').newDataInputStream())

//打包时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    // gradle 3.0.0 以上需要有这个,定位产品风味的纬度,可以多个纬度，下例就为：付费，国家
     flavorDimensions 'app'

    defaultConfig {
//        applicationId "com.sen.mygradleapplication"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        multiDexEnabled true //分包

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

//    在视图中配置生成的签名配置方式
//    signingConfigs {
//        sign {
//            storeFile file('D:\\demo\\learnDemo\\MyGradleApplication\\my_gradle_app.jks')
//            storePassword '123456'
//            keyAlias 'sen'
//            keyPassword '123456'
//        }
//    }


    //通过签名配置文件设置签名,注意顶部定义的properties = new Properties()
    signingConfigs {
        release{
            storeFile file(properties.getProperty("keystroe_storeFile"))//修改成自己的签名
            storePassword properties.getProperty("keystroe_storePassword")//修改成自己的签名
            keyAlias properties.getProperty("keystroe_keyAlias")//修改成自己的签名
            keyPassword properties.getProperty("keystroe_keyPassword")//修改成自己的签名
        }
    }


    buildTypes {

        debug{
            minifyEnabled false
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）,没有剔除的话会有其他的文件例如：xxx.version
        exclude 'META-INF/*******'
    }

    //多渠道打包使用，gralde3.0以上 要在上面定义好对应的纬度，例如：flavorDimensions: "isPaying"
    productFlavors{
        app1 {
            applicationId "com.app1.mygradleapplication"
            // 如果string资源文件中app_name这里就不能再次定义resValue 会产生冲突，解决方案就是去掉strings.xml中的app_name,在这里定义，然后在manifest文件中引用这里的resValue字段app_name,
            // 或者如下注释掉resValue 在对应的app1（main）中的strings.xml中添加对应的app_name也可以
//            resValue "string","app_name","app1"
            manifestPlaceholders = [app_icon : "@mipmap/app_icon",
                                    CHANNEL_VALUE : "app1app"]
            dimension "app"
        }

        //这里名字跟src目录下的app2对应，不对应的话，会自动匹配到main里面的资源文件打包
        app2 {
            applicationId "com.app2.mygradleapplication"
//            resValue "string","app_name","app2"
            manifestPlaceholders = [app_icon : "@mipmap/app_icon",
                                    CHANNEL_VALUE : "app2app"]
            dimension "app"
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                def fileName = "sen_${variant.productFlavors[0].name}-${defaultConfig.versionCode}-${defaultConfig.versionName}-${releaseTime()}.apk"
                //def fileName = outputFile.name.replace("app", "${rootProject.ext.appName}-${releaseTime()}-${defaultConfig.versionCode}-${defaultConfig.versionName}")
                //                output.outputFile = new File(outputFile.parent, fileName)
                outputFileName = fileName
            }
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:"
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}